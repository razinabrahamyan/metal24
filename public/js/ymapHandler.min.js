/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!*************************************************!*\
  !*** ./resources/user_assets/js/ymapHandler.js ***!
  \*************************************************/
var _addresses;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

window.ymapHandler = new Vue({
  el: "#footer-area",
  data: {
    map: undefined,
    placemark: undefined,
    points: (_addresses = addresses) !== null && _addresses !== void 0 ? _addresses : null,
    yaMapsShown: false
  },
  methods: {
    initMap: function initMap() {
      var _this = this;

      this.map = new ymaps.Map("ymap", {
        center: [55.76, 37.64],
        zoom: 9,
        controls: []
      }, {
        searchControlProvider: 'yandex#search',
        suppressMapOpenBlock: true,
        suppressObsoleteBrowserNotifier: true
      });
      this.map.controls.add(new ymaps.control.FullscreenControl());
      this.map.controls.add(new ymaps.control.ZoomControl({
        options: {
          size: "small"
        }
      }));

      if (this.points !== null) {
        Object.entries(this.points).forEach(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              point = _ref2[1];

          _this.map.geoObjects.add(new ymaps.Placemark([point.lat, point.lng], {
            balloonContent: point.address
          }));
        });
      }
    },
    moveToMapPoint: function moveToMapPoint(lat, lng) {
      this.map.setCenter([lat, lng], 15);
    },
    mountMap: function mountMap() {
      var el = $('#ymap')[0];
      var rect = el.getBoundingClientRect();

      if (rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
      /* or $(window).height() */
      rect.right <= (window.innerWidth || document.documentElement.clientWidth)
      /* or $(window).width() */
      ) {
          var elem = document.createElement('script');
          elem.type = 'text/javascript';
          elem.src = 'https://api-maps.yandex.ru/2.1/?load=package.standard,package.geoObjects&lang=ru_RU&amp;apikey=8c1ddd83-7c9c-4d9e-a532-9c67ea915ff8&onload=window.ymapHandler.initMap';
          document.getElementsByTagName('body')[0].appendChild(elem);
          this.yaMapsShown = true;
        }
    }
  },
  mounted: function mounted() {
    if ($(window).width() > 980 && $('#ymap').is(":visible")) {
      this.mountMap();
      $(window).scroll(function () {
        if (!window.ymapHandler.yaMapsShown && $(window).width() > 980) {
          window.ymapHandler.mountMap();
        }
      });
    }
  }
});
/******/ })()
;